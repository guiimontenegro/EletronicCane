{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SyntheticPlatformEmitter, CodedError } from 'expo-modules-core';\nimport { VoiceQuality } from \"./Speech.types\";\nvar MAX_SPEECH_INPUT_LENGTH = 32767;\n\nfunction _getVoices() {\n  return _regeneratorRuntime.async(function getVoices$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve) {\n            var voices = window.speechSynthesis.getVoices();\n\n            if (voices.length > 0) {\n              resolve(voices);\n              return;\n            }\n\n            window.speechSynthesis.onvoiceschanged = function () {\n              var voices = window.speechSynthesis.getVoices();\n              resolve(voices);\n            };\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default {\n  get name() {\n    return 'ExponentSpeech';\n  },\n\n  speak: function speak(id, text, options) {\n    return function _callee() {\n      var message, voices, _voices;\n\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(text.length > MAX_SPEECH_INPUT_LENGTH)) {\n                _context2.next = 2;\n                break;\n              }\n\n              throw new CodedError('ERR_SPEECH_INPUT_LENGTH', 'Speech input text is too long! Limit of input length is: ' + MAX_SPEECH_INPUT_LENGTH);\n\n            case 2:\n              message = new SpeechSynthesisUtterance();\n\n              if (typeof options.rate === 'number') {\n                message.rate = options.rate;\n              }\n\n              if (typeof options.pitch === 'number') {\n                message.pitch = options.pitch;\n              }\n\n              if (typeof options.language === 'string') {\n                message.lang = options.language;\n              }\n\n              if (typeof options.volume === 'number') {\n                message.volume = options.volume;\n              }\n\n              if (!('_voiceIndex' in options && options._voiceIndex != null)) {\n                _context2.next = 12;\n                break;\n              }\n\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(_getVoices());\n\n            case 10:\n              voices = _context2.sent;\n              message.voice = voices[Math.min(voices.length - 1, Math.max(0, options._voiceIndex))];\n\n            case 12:\n              if (!(typeof options.voice === 'string')) {\n                _context2.next = 17;\n                break;\n              }\n\n              _context2.next = 15;\n              return _regeneratorRuntime.awrap(_getVoices());\n\n            case 15:\n              _voices = _context2.sent;\n              message.voice = _voices[Math.max(0, _voices.findIndex(function (voice) {\n                return voice.voiceURI === options.voice;\n              }))];\n\n            case 17:\n              if (typeof options.onResume === 'function') {\n                message.onresume = options.onResume;\n              }\n\n              if (typeof options.onMark === 'function') {\n                message.onmark = options.onMark;\n              }\n\n              if (typeof options.onBoundary === 'function') {\n                message.onboundary = options.onBoundary;\n              }\n\n              message.onstart = function (nativeEvent) {\n                SyntheticPlatformEmitter.emit('Exponent.speakingStarted', {\n                  id: id,\n                  nativeEvent: nativeEvent\n                });\n              };\n\n              message.onend = function (nativeEvent) {\n                SyntheticPlatformEmitter.emit('Exponent.speakingDone', {\n                  id: id,\n                  nativeEvent: nativeEvent\n                });\n              };\n\n              message.onpause = function (nativeEvent) {\n                SyntheticPlatformEmitter.emit('Exponent.speakingStopped', {\n                  id: id,\n                  nativeEvent: nativeEvent\n                });\n              };\n\n              message.onerror = function (nativeEvent) {\n                SyntheticPlatformEmitter.emit('Exponent.speakingError', {\n                  id: id,\n                  nativeEvent: nativeEvent\n                });\n              };\n\n              message.text = text;\n              window.speechSynthesis.speak(message);\n              return _context2.abrupt(\"return\", message);\n\n            case 27:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getVoices: function getVoices() {\n    return function _callee2() {\n      var voices;\n      return _regeneratorRuntime.async(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(_getVoices());\n\n            case 2:\n              voices = _context3.sent;\n              return _context3.abrupt(\"return\", voices.map(function (voice) {\n                return {\n                  identifier: voice.voiceURI,\n                  quality: VoiceQuality.Default,\n                  isDefault: voice.default,\n                  language: voice.lang,\n                  localService: voice.localService,\n                  name: voice.name,\n                  voiceURI: voice.voiceURI\n                };\n              }));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  isSpeaking: function isSpeaking() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", window.speechSynthesis.speaking);\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  stop: function stop() {\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", window.speechSynthesis.cancel());\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  pause: function pause() {\n    return function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", window.speechSynthesis.pause());\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  resume: function resume() {\n    return function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", window.speechSynthesis.resume());\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  maxSpeechInputLength: MAX_SPEECH_INPUT_LENGTH\n};","map":{"version":3,"sources":["../src/Speech/ExponentSpeech.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { SyntheticPlatformEmitter, CodedError } from 'expo-modules-core';\n\nimport { SpeechOptions, WebVoice, VoiceQuality } from './Speech.types';\n\n//https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text\nconst MAX_SPEECH_INPUT_LENGTH = 32767;\n\nasync function getVoices(): Promise<SpeechSynthesisVoice[]> {\n  return new Promise<SpeechSynthesisVoice[]>((resolve) => {\n    const voices = window.speechSynthesis.getVoices();\n\n    if (voices.length > 0) {\n      resolve(voices);\n      return;\n    }\n\n    // when a page loads it takes some amount of time to populate the voices list\n    // see https://stackoverflow.com/a/52005323/4337317\n    window.speechSynthesis.onvoiceschanged = function () {\n      const voices = window.speechSynthesis.getVoices();\n      resolve(voices);\n    };\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentSpeech';\n  },\n  async speak(id: string, text: string, options: SpeechOptions): Promise<SpeechSynthesisUtterance> {\n    if (text.length > MAX_SPEECH_INPUT_LENGTH) {\n      throw new CodedError(\n        'ERR_SPEECH_INPUT_LENGTH',\n        'Speech input text is too long! Limit of input length is: ' + MAX_SPEECH_INPUT_LENGTH\n      );\n    }\n\n    const message = new SpeechSynthesisUtterance();\n\n    if (typeof options.rate === 'number') {\n      message.rate = options.rate;\n    }\n    if (typeof options.pitch === 'number') {\n      message.pitch = options.pitch;\n    }\n    if (typeof options.language === 'string') {\n      message.lang = options.language;\n    }\n    if (typeof options.volume === 'number') {\n      message.volume = options.volume;\n    }\n    if ('_voiceIndex' in options && options._voiceIndex != null) {\n      const voices = await getVoices();\n      message.voice = voices[Math.min(voices.length - 1, Math.max(0, options._voiceIndex))];\n    }\n    if (typeof options.voice === 'string') {\n      const voices = await getVoices();\n      message.voice =\n        voices[\n          Math.max(\n            0,\n            voices.findIndex((voice) => voice.voiceURI === options.voice)\n          )\n        ];\n    }\n    if (typeof options.onResume === 'function') {\n      message.onresume = options.onResume;\n    }\n    if (typeof options.onMark === 'function') {\n      message.onmark = options.onMark;\n    }\n    if (typeof options.onBoundary === 'function') {\n      message.onboundary = options.onBoundary;\n    }\n\n    message.onstart = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingStarted', { id, nativeEvent });\n    };\n    message.onend = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingDone', { id, nativeEvent });\n    };\n    message.onpause = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingStopped', { id, nativeEvent });\n    };\n    message.onerror = (nativeEvent: SpeechSynthesisErrorEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingError', { id, nativeEvent });\n    };\n\n    message.text = text;\n\n    window.speechSynthesis.speak(message);\n\n    return message;\n  },\n  async getVoices(): Promise<WebVoice[]> {\n    const voices = await getVoices();\n    return voices.map((voice) => ({\n      identifier: voice.voiceURI,\n      quality: VoiceQuality.Default,\n      isDefault: voice.default,\n      language: voice.lang,\n      localService: voice.localService,\n      name: voice.name,\n      voiceURI: voice.voiceURI,\n    }));\n  },\n  async isSpeaking(): Promise<boolean> {\n    return window.speechSynthesis.speaking;\n  },\n  async stop(): Promise<void> {\n    return window.speechSynthesis.cancel();\n  },\n  async pause(): Promise<void> {\n    return window.speechSynthesis.pause();\n  },\n  async resume(): Promise<void> {\n    return window.speechSynthesis.resume();\n  },\n  maxSpeechInputLength: MAX_SPEECH_INPUT_LENGTH,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}